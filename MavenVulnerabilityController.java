package com.hackthon.dependecy;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;

@RestController
@RequestMapping("/vulnerability")
public class MavenVulnerabilityController {

    @PostMapping(consumes = "application/xml")
    public List<HashMap<String, Object>> fetchVulnerability(@RequestBody String dependencyXml) {
        try {
            // Parse the XML input
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            InputSource is = new InputSource(new StringReader(dependencyXml));
            Document doc = builder.parse(is);
            Element dependencyElement = doc.getDocumentElement();

            // Extract required values: groupId, artifactId, version
            String groupId = getElementValue(dependencyElement, "groupId");
            String artifactId = getElementValue(dependencyElement, "artifactId");
            String version = getElementValue(dependencyElement, "version");

            // Build the exclusions block if any exclusions are provided
            String exclusionsBlock = "";
            NodeList exclusionsList = dependencyElement.getElementsByTagName("exclusions");
            if (exclusionsList.getLength() > 0) {
                // There should be one <exclusions> element containing one or more <exclusion> children.
                Element exclusionsElement = (Element) exclusionsList.item(0);
                NodeList exclusionNodes = exclusionsElement.getElementsByTagName("exclusion");
                if (exclusionNodes.getLength() > 0) {
                    StringBuilder exclusionsBuilder = new StringBuilder();
                    exclusionsBuilder.append("<exclusions>");
                    for (int i = 0; i < exclusionNodes.getLength(); i++) {
                        Element exclusion = (Element) exclusionNodes.item(i);
                        String exGroupId = getElementValue(exclusion, "groupId");
                        String exArtifactId = getElementValue(exclusion, "artifactId");
                        if (exGroupId != null && exArtifactId != null) {
                            exclusionsBuilder.append("""
                                <exclusion>
                                    <groupId>%s</groupId>
                                    <artifactId>%s</artifactId>
                                </exclusion>
                                """.formatted(exGroupId, exArtifactId));
                        }
                    }
                    exclusionsBuilder.append("</exclusions>");
                    exclusionsBlock = exclusionsBuilder.toString();
                }
            }

            return MavenVulnerabilityService.fetchVulnerabilities(groupId, artifactId, version, exclusionsBlock);
        } catch (Exception e) {
            e.printStackTrace();
            return new ArrayList<>();
        }
    }

    // Helper method to extract the text content of a given element tag name
    private String getElementValue(Element parent, String tagName) {
        NodeList list = parent.getElementsByTagName(tagName);
        if (list.getLength() > 0) {
            return list.item(0).getTextContent().trim();
        }
        return null;
    }
}